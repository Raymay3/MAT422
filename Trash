{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOeasTW0GIavK9ohq5DOPF9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Raymay3/MAT422/blob/main/HW_1.3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1.3.1. QR decomposition**\n",
        "\n",
        "**QR decomposition** is a method for decomposing a matrix $A$ into two matrices $Q$ and $R$, where:\n",
        "\n",
        "\n",
        "*   $Q$ is an orthogonal matrix, meaning its columns are orthonormal vectors (i.e., $Q^T$$Q$ $=$ $I$).\n",
        "*   $R$ is an upper triangular matrix.\n",
        "\n",
        "This decomposition is useful in solving the linear least squares problem and is closely related to the Gram–Schmidt process for constructing an orthonormal basis from a linearly independent set of vectors. The equation for QR decomposition is given by:\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        "A = QR\n",
        "\\end{aligned}\n",
        "\\\n",
        "where $A$ is an $n × m$ matrix, $Q$ is an $n × m$ matrix with orthonormal columns, and $R$ is an $m × m$ upper triangular matrix. QR decomposition is widely used in various numerical algorithms, including solving linear systems, eigenvalue computations, and least squares approximations.\n",
        "\n",
        "\\\n",
        "**Gram-Schmidt Process**\n",
        "\n",
        "The *Gram-Schmidt process* is a method for converting a set of linearly independent vectors into an orthonormal set. Given a matrix $A$ whose columns are linearly independent vectors, the Gram-Schmidt process iteratively generates an orthonormal basis for the column space of $A$, forming the matrix $Q$. The coefficients used in the linear combinations to produce the orthonormal vectors form the matrix $R$.\n",
        "\n",
        "# *QR Decomposition Using Python*\n",
        "\n",
        "Here we will demonstrate the QR decomposition of a matrix using Python with the help of NumPy. The first method we will use is the Gram-Schmidt process to manually compute the QR decomposition, and the second method will use NumPy’s built-in function **`np.linalg.qr()`**.\n",
        "\n",
        "\\\n",
        "**Example 1: Gram-Schmidt Process for QR Decomposition**"
      ],
      "metadata": {
        "id": "mxUI0TZmvr3A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Gram-Schmidt process to compute Q and R matrices\n",
        "def gram_schmidt(A):\n",
        "    n, m = A.shape\n",
        "    Q = np.zeros((n, m))\n",
        "    R = np.zeros((m, m))\n",
        "\n",
        "    for i in range(m):\n",
        "        # Compute the orthogonal component of the ith column of A\n",
        "        q = A[:, i]\n",
        "        for j in range(i):\n",
        "            R[j, i] = np.dot(Q[:, j], A[:, i])\n",
        "            q = q - R[j, i] * Q[:, j]\n",
        "        R[i, i] = np.linalg.norm(q)\n",
        "        Q[:, i] = q / R[i, i]\n",
        "\n",
        "    return Q, R\n",
        "\n",
        "# Define matrix A (n x m)\n",
        "A = np.array([[1, 2],\n",
        "              [3, 4],\n",
        "              [5, 6]])\n",
        "\n",
        "# Compute QR decomposition using Gram-Schmidt process\n",
        "Q, R = gram_schmidt(A)\n",
        "\n",
        "print(\"Matrix A:\")\n",
        "print(A)\n",
        "print(\"\\nMatrix Q (Orthogonal):\")\n",
        "print(Q)\n",
        "print(\"\\nMatrix R (Upper Triangular):\")\n",
        "print(R)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0oDLSG2YF2mq",
        "outputId": "8930839b-6ef8-4dea-f472-c19af3cc204c"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix A:\n",
            "[[1 2]\n",
            " [3 4]\n",
            " [5 6]]\n",
            "\n",
            "Matrix Q (Orthogonal):\n",
            "[[ 0.16903085  0.89708523]\n",
            " [ 0.50709255  0.27602622]\n",
            " [ 0.84515425 -0.34503278]]\n",
            "\n",
            "Matrix R (Upper Triangular):\n",
            "[[5.91607978 7.43735744]\n",
            " [0.         0.82807867]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this example:\n",
        "*   We define a $3 × 2$ matrix $A$.\n",
        "*   We apply the Gram-Schmidt process to decompose $A$ into an orthogonal matrix $Q$ and an upper triangular matrix $R$.\n",
        "\n",
        "**Explanation:**\n",
        "\n",
        "The matrix $Q$ contains orthonormal vectors (its columns are unit vectors and mutually perpendicular).\n",
        "\n",
        "\n",
        "*   The values in $Q$ represent the normalized orthogonal basis vectors generated from the Gram-Schmidt process.\n",
        "*   Each column of $Q$ corresponds to a new vector in the orthonormal basis.\n",
        "\n",
        "The matrix $R$ is upper triangular, meaning all elements below the diagonal are zero.\n",
        "\n",
        "*   The diagonal elements of $R$ represent the norms of the vectors, and the upper triangular elements correspond to the coefficients of the linear combinations of the orthonormal vectors that reconstruct the original vectors in $A$.\n",
        "\n",
        "\\\n",
        "**Example 2: QR Decomposition Using NumPy**\n",
        "\n",
        "For convenience, we can use the built-in **`np.linalg.qr()`** function to compute the QR decomposition directly."
      ],
      "metadata": {
        "id": "nC7hlP2py3_I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Using NumPy's built-in function to compute QR decomposition\n",
        "import numpy as np\n",
        "\n",
        "Q_np, R_np = np.linalg.qr(A)\n",
        "\n",
        "print(\"\\nMatrix Q (NumPy's QR):\")\n",
        "print(Q_np)\n",
        "print(\"\\nMatrix R (NumPy's QR):\")\n",
        "print(R_np)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1e7H7QRW0opv",
        "outputId": "92a15e04-1deb-4a76-9f1b-a5b0fbe7ad10"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Matrix Q (NumPy's QR):\n",
            "[[-0.16903085  0.89708523]\n",
            " [-0.50709255  0.27602622]\n",
            " [-0.84515425 -0.34503278]]\n",
            "\n",
            "Matrix R (NumPy's QR):\n",
            "[[-5.91607978 -7.43735744]\n",
            " [ 0.          0.82807867]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here, the $Q$ matrix has negative signs compared to the Gram-Schmidt implementation. This is because the QR decomposition is not unique—there can be different valid factorizations depending on how the signs of the orthonormal vectors are chosen.\n",
        "\n",
        "*   $Q$ still contains orthonormal vectors, but their directions may be flipped (which is perfectly valid in the orthogonal set).\n",
        "*   $R$ has a negative value for the diagonal elements because the sign change in $Q$ affects the sign in $R$.\n",
        "\n",
        "***Applications of QR Decomposition***\n",
        "\n",
        "QR decomposition is useful in solving the linear least squares problem, where we seek to minimize the difference between the observed values and the values predicted by a linear model. This can be done efficiently using QR decomposition.\n",
        "\n",
        "\\\n",
        "Additionally, QR decomposition plays a crucial role in numerical methods, particularly in algorithms for solving systems of linear equations, eigenvalue problems, and for matrix factorizations in machine learning algorithms.\n",
        "\n",
        "# **1.3.2. Least-squares problems**\n",
        "\n",
        "We want to solve the system $Ax = b$, where $A$ is an $n × m$ matrix, and $b$ is an $n$-dimensional vector. Often, this system is inconsistent, and the best solution is found by minimizing the residual error $∥Ax−b∥^2$, known as the **least-squares problem**.\n",
        "\n",
        "Given the matrix $A$, the least-squares solution can be found by solving the normal equations:\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        "A^T Ax = A^T b\n",
        "\\end{aligned}\n",
        "\n",
        "\\\n",
        "However, a more stable way to solve the least-squares problem is by using **QR decomposition**, where:\n",
        "\n",
        "1.   Decompose $A$ into $QR$, where $Q$ is orthogonal, and $R$ is upper triangular.\n",
        "2.   Solve the system $Rx = Q^T b$ for $x$."
      ],
      "metadata": {
        "id": "w7OuqiGF2chP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from numpy.linalg import qr, solve\n",
        "\n",
        "# Define the matrix A (n x m) and vector b (n x 1)\n",
        "A = np.array([[2, 1], [1, 3], [4, 1], [3, 2]])\n",
        "b = np.array([5, 6, 8, 7])\n",
        "\n",
        "# Step 1: Perform QR decomposition of A\n",
        "Q, R = qr(A)\n",
        "\n",
        "# Step 2: Compute Q^T b\n",
        "Q_T_b = np.dot(Q.T, b)\n",
        "\n",
        "# Step 3: Solve the upper triangular system Rx = Q^T b using back substitution\n",
        "x_ls = solve(R, Q_T_b)\n",
        "\n",
        "# Output the results\n",
        "print(\"Matrix A:\")\n",
        "print(A)\n",
        "\n",
        "print(\"\\nVector b:\")\n",
        "print(b)\n",
        "\n",
        "print(\"\\nMatrix Q (Orthogonal):\")\n",
        "print(Q)\n",
        "\n",
        "print(\"\\nMatrix R (Upper Triangular):\")\n",
        "print(R)\n",
        "\n",
        "print(\"\\nLeast-squares solution x:\")\n",
        "print(x_ls)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADa-d-5TCdRX",
        "outputId": "826a1997-27d8-43bf-b047-9afacc228b7c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix A:\n",
            "[[2 1]\n",
            " [1 3]\n",
            " [4 1]\n",
            " [3 2]]\n",
            "\n",
            "Vector b:\n",
            "[5 6 8 7]\n",
            "\n",
            "Matrix Q (Orthogonal):\n",
            "[[-3.65148372e-01 -1.51561915e-16]\n",
            " [-1.82574186e-01 -9.12870929e-01]\n",
            " [-7.30296743e-01  3.65148372e-01]\n",
            " [-5.47722558e-01 -1.82574186e-01]]\n",
            "\n",
            "Matrix R (Upper Triangular):\n",
            "[[-5.47722558 -2.73861279]\n",
            " [ 0.         -2.73861279]]\n",
            "\n",
            "Least-squares solution x:\n",
            "[1.6 1.4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Explanation of the Code***\n",
        "\n",
        "1.   **Matrix $A$ and Vector $b$**: We define a rectangular matrix $A$ (where $n > m$) and the vector $b$ representing the observations or measurements we want to approximate using $A$.\n",
        "2.   **QR Decomposition**: Using NumPy’s **`qr()`** function, we decompose matrix $A$ into an orthogonal matrix $Q$ and an upper triangular matrix $R$.\n",
        "3.   **Solving for $x$**: After obtaining $Q$ and $R$, we compute $Q^T b$ and then solve the system $Rx = Q^T b$ to get the least-squares solution for $x$.\n",
        "\n",
        "***Explanation of the Output***\n",
        "\n",
        "1.   **Matrix $A$ and Vector $b$**: The matrix $A$ and vector $b$ are the inputs to the least-squares problem. We are trying to approximate $b$ using a linear combination of the columns of $A$, which means we want to find $x$ such that $Ax ≈ b$.\n",
        "2.   **Orthogonal Matrix $Q$**: The matrix $Q$ is orthogonal, meaning its columns are orthonormal vectors (i.e., $Q^T Q = I$). Notice that some elements of $Q$ are very small (close to zero), like the entry **`-1.51561915e-16`**, which is effectively zero due to numerical precision limits.\n",
        "3.   **Upper Triangular Matrix $R$**: The matrix $R$ is upper triangular, as expected from QR decomposition. This structure is helpful when solving the least-squares problem because the system $Rx = Q^T b$ can be solved using back substitution.\n",
        "4.   **Least-Squares Solution $x$**: The least-squares solution is $x = [1.6,1.4]$, meaning that these values minimize the residual error $∥Ax−b∥^2$. This is the best approximation for the system $Ax = b$, given that the system is over-determined (i.e., more equations than unknowns).\n",
        "\n",
        "***Interpretation of Results***\n",
        "\n",
        "\n",
        "\n",
        "*   **Orthogonality of $Q$**: The columns of $Q$ are orthonormal, which means they are both orthogonal and have unit length. This is crucial for stability when solving least-squares problems.\n",
        "*   **Upper Triangular $R$**: The upper triangular structure of $R$ allows for an efficient solution using back substitution, reducing numerical instability compared to direct methods like inverting $A^T A$.\n",
        "*   **Least-Squares Solution**: The solution $x = [1.6,1.4]$ is the vector that minimizes the residual error between $Ax$ and $b$, providing the best fit in the least-squares sense.\n",
        "\n",
        "This process highlights how QR decomposition offers a stable and efficient way to solve over-determined systems. Instead of directly solving the normal equations (which can be numerically unstable), QR decomposition provides a more robust alternative."
      ],
      "metadata": {
        "id": "JIT97WE9Eoyn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1.3.3. Linear regression**\n",
        "\n",
        "In this section, we will implement linear regression using Python to solve the least-squares problem as described. The goal is to find a set of coefficients $β$ such that the predicted values $\\hat{y_i}$ are as close as possible to the actual values $y_i$ based on the input features $x_i$.\n",
        "\n",
        "We will follow these steps:\n",
        "\n",
        "1.   Generate sample data.\n",
        "2.   Set up the linear regression problem in matrix form.\n",
        "3.   Use the normal equations $(A^T A)β = A^T y$ to solve for the optimal $β$.\n",
        "4.   Compare the results with a standard implementation from the **`scikit-learn`** library.\n",
        "\n"
      ],
      "metadata": {
        "id": "Zr_uftLKIRnO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Generate synthetic data for demonstration\n",
        "np.random.seed(0)\n",
        "n = 100  # Number of data points\n",
        "X = 2 * np.random.rand(n, 1)  # Random feature values (one feature)\n",
        "y = 4 + 3 * X + np.random.randn(n, 1)  # Linear relation with some noise\n",
        "\n",
        "# Add intercept term to X (matrix A)\n",
        "X_b = np.c_[np.ones((n, 1)), X]  # Add a column of ones to X\n",
        "\n",
        "# Compute the coefficients using the normal equation\n",
        "theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)\n",
        "\n",
        "print(\"Estimated coefficients (β):\", theta_best)\n",
        "\n",
        "# Plot the original data and the regression line\n",
        "plt.scatter(X, y, color=\"blue\", label=\"Data points\")\n",
        "plt.plot(X, X_b.dot(theta_best), color=\"red\", label=\"Regression line\")\n",
        "plt.xlabel(\"x\")\n",
        "plt.ylabel(\"y\")\n",
        "plt.legend()\n",
        "plt.title(\"Linear Regression\")\n",
        "plt.show()\n",
        "\n",
        "# Compare with scikit-learn's implementation\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(X, y)\n",
        "print(\"Intercept using scikit-learn (β0):\", lin_reg.intercept_[0])\n",
        "print(\"Coefficient using scikit-learn (β1):\", lin_reg.coef_[0][0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "KhBE34sMLChW",
        "outputId": "e82c3996-d4ac-4b3f-aa28-0dfb86643fe8"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated coefficients (β): [[4.22215108]\n",
            " [2.96846751]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Intercept using scikit-learn (β0): 4.222151077447231\n",
            "Coefficient using scikit-learn (β1): 2.968467510701019\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Explanation of the Math***\n",
        "\n",
        "1. **Linear Regression as a Least-Squares Problem**\n",
        "\n",
        "Given data points $\\{(x_i, y_i)\\}_{i=1} ^n$, we want to find a linear function that best fits the data. The linear model is given by:\n",
        "\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        "\\hat{y_i} = β_0 + β_1 x_i\n",
        "\\end{aligned}\n",
        "\n",
        "\\\n",
        "\n",
        "Where $β_0$ is the intercept and $β_1$ is the slope (or coefficient) for the feature $x_i$. The goal is to minimize the sum of squared differences between the actual and predicted values of $y_i$, i.e., minimize:\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        " \\sum_{i=1}^{n} (y_i - \\hat{y_i})^2\n",
        " \\end{aligned}\n",
        "\n",
        "\\\n",
        "\n",
        "2. **Matrix Formulation**\n",
        "\n",
        "To generalize this for multiple input features, we set up the problem in matrix form. Let:\n",
        "\n",
        "\n",
        "\n",
        "*   $y ∈ ℝ^n$: the vector of observed values.\n",
        "*   $A ∈ ℝ^{n×(d+1)}$: the matrix where each row is $[1,x_i^T]$ (with an intercept term).\n",
        "*   $β ∈ ℝ^{d+1}$: the vector of coefficients (including the intercept).\n",
        "\n",
        "The least-squares problem is formulated as:\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        " min_β ∥y−Aβ∥^2\n",
        " \\end{aligned}\n",
        "\n",
        "\\\n",
        "The solution to this problem can be found by solving the normal equations:\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        " A^T Aβ = A^T y\n",
        " \\end{aligned}\n",
        "\n",
        "\\\n",
        "\n",
        "Which yields:\n",
        "\n",
        "\\\n",
        "\\begin{aligned}\n",
        " β = (A^T A)^{−1} A^T y\n",
        " \\end{aligned}\n",
        "\n",
        "\\\n",
        "\n",
        "3. **Solving the Normal Equations**\n",
        "\n",
        "We can directly compute the optimal $β$ using the formula above. In the code, we use **`np.linalg.inv()`** to compute the inverse of $A^T A$, and then multiply by $A^T y$ to obtain the coefficients.\n",
        "\n",
        "4. **Comparison with scikit-learn**\n",
        "\n",
        "To verify the result, we use the **`LinearRegression`** class from the **`scikit-learn`** library, which automatically fits the model and computes the optimal coefficients.\n",
        "\n",
        "The estimated coefficients from both the normal equation and the scikit-learn implementation are essentially the same, confirming that the two approaches yield identical results.\n",
        "\n",
        "**Graphical Output**\n",
        "\n",
        "The plot shows the scatter of data points and the fitted regression line. The red line represents the linear model that best fits the data based on the least-squares criterion.\n",
        "\n",
        "***Conclusion***\n",
        "\n",
        "This example demonstrates how linear regression can be formulated and solved as a least-squares problem, both using the normal equations and a library implementation. It shows the power of matrix operations in solving real-world optimization problems like regression, where we are tasked with finding the best fit for data."
      ],
      "metadata": {
        "id": "8tjchdaFP_8u"
      }
    }
  ]
}
